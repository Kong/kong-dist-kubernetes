apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: kong
  name: kong-ingress-data-plane
  labels:
    app: kong-ingress-data-plane
spec:
  selector:
    matchLabels:
      app: kong-ingress-data-plane
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      annotations:
        k8s.konghq.com/sidecar-inject: "false"
      labels:
        app: kong-ingress-data-plane
    spec:
      initContainers:
      - name: wait-for-postgres
        image: busybox:latest
        imagePullPolicy: IfNotPresent
        env:
          - name: KONG_PG_PORT
            value: "5432"
          - name: KONG_PG_HOST
            value: postgres.kong.svc
        command: [ "/bin/sh", "-c", "until nc -zv $KONG_PG_HOST $KONG_PG_PORT -w1; do echo 'waiting for db'; sleep 1; done" ]
      containers:
      - name: kong-ingress-data-plane
        image: kong
        imagePullPolicy: IfNotPresent
        env:
          - name: KONG_PG_PASSWORD
            value: kong
          - name: KONG_PG_HOST
            value: postgres.kong.svc
          - name: KONG_LOG_LEVEL
            value: notice
          - name: KONG_ADMIN_ACCESS_LOG
            value: /dev/stdout
          - name: KONG_PROXY_ERROR_LOG
            value: /dev/stderr
          - name: KONG_ADMIN_ERROR_LOG
            value: /dev/stderr
          - name: KONG_ADMIN_LISTEN
            value: 'off'
          - name: KONG_PROXY_LISTEN
            value: 0.0.0.0:8000,0.0.0.0:8443 ssl
          - name: KONG_NGINX_WORKER_PROCESSES
            value: "1"
        ports:
        - name: data-http
          containerPort: 8000
        - name: data-https
          containerPort: 8443
        readinessProbe:
          tcpSocket:
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 10
        livenessProbe:
          tcpSocket:
            port: 8000
          initialDelaySeconds: 15
          periodSeconds: 20

---
apiVersion: v1
kind: Service
metadata:
  namespace: kong
  name: kong-ingress-data-plane
spec:
  type: NodePort
  ports:
  - name: kong-proxy-http
    port: 8000
    targetPort: 8000
    protocol: TCP
  - name: kong-proxy-https
    port: 8443
    targetPort: 8443
    protocol: TCP
  selector:
    app: kong-ingress-data-plane
